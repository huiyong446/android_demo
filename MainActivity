package com.yzou.androidsocketdemo;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

/* 
 * 这个demo主要是为了总结下目前所接触过的socket通讯，并将之运用到android手机之上
 * 这个界面将会用最简单的方式来实现2部手机之间的socket，一部手机将启动server作为server端，另一部手机启动client作为client，二者进行数据传递
 * 注：这个demo的网络环境只考虑了wifi，因为我这边网络环境很神奇。。。
 * */
public class MainActivity extends Activity implements OnClickListener {

	private Button start_server, start_client;

	private TextView text_server, text_client, get_info, send_info;
	
	private static final int SERVER_CREATE_SUCCESS = 0;
	private static final int SERVER_CREATE_FAILED = 1;
	private static final int SERVER_ACCEPT_FAILED = 2;
	private static final int CLIENT_CONNECT_SUCCESS = 3;
	private static final int CLIENT_CONNECT_FAILED = 4;
	private static final int CLIENT_ACCEPT_FAILED = 5;
	private static final int SERVER_GET_INFO = 6;
	private static final int CLIENT_GET_INFO = 7;

	private ServerSocket mServerSocket;
	private Socket mClientSocket;
	private static final int SERVER_PORT = 8888;
	private static final String HOST = "172.16.20.235";
	private boolean isConnected = false;
	
	private final Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub

			if (SERVER_CREATE_SUCCESS == msg.what) {
				text_server.setText("sever 启动  成功在8888这个端口创建serversocket");
			} else if (SERVER_CREATE_FAILED == msg.what) {
				text_server.setText("sever 启动 -> 在这个端口上创建serversocket失败了哦  ");
			} else if (SERVER_ACCEPT_FAILED == msg.what) {
				text_server.setText("接收client请求失败了哦  ");
			} else if (SERVER_GET_INFO == msg.what) {
				get_info.setText("sever -> client_request : " + msg.obj);
			} else if (CLIENT_CONNECT_SUCCESS == msg.what) {
				text_client.setText("client 启动");
			} else if (CLIENT_CONNECT_FAILED == msg.what) {
				text_client.setText("UnknownHostException, 连接server端失败");
			} else if (CLIENT_ACCEPT_FAILED ==msg.what) {
				text_client.setText("IOException, client给server端发送或者接受信息失败");
			} else if (CLIENT_GET_INFO == msg.what) {
				send_info.setText("client -> server_response : " + msg.obj);
			}
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		initView();
		setListener();
	}

	private void initView() {
		start_server = (Button) findViewById(R.id.start_server);
		start_client = (Button) findViewById(R.id.start_client);

		text_server = (TextView) findViewById(R.id.text_server);
		text_client = (TextView) findViewById(R.id.text_client);
		get_info = (TextView) findViewById(R.id.get_info);
		send_info = (TextView) findViewById(R.id.send_info);
	}

	private void setListener() {
		start_server.setOnClickListener(this);
		start_client.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		if (v.getId() == R.id.start_server) {
			Thread mThread_server = new Thread(new ServerThread());
			mThread_server.start();
		} else if (v.getId() == R.id.start_client) {
			if (!isConnected) {
				Thread mThread_client = new Thread(new ClientThread());
				mThread_client.start();
			}
		}
	}

	private class ServerThread implements Runnable {

		@Override
		public void run() {
			// TODO Auto-generated method stub
			try {
				mServerSocket = new ServerSocket(SERVER_PORT);
				mHandler.sendEmptyMessage(SERVER_CREATE_SUCCESS);
				
				// 这里堵塞，去等待client的请求
				while (true) {
					try {
						mClientSocket = mServerSocket.accept();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						mHandler.sendEmptyMessage(SERVER_ACCEPT_FAILED);
					}

					Log.d("zouyong", "");
					
					// 下面获取client的输入输出流 (I/O)
					String client_request = "";
					String server_response = "";

					PrintWriter out = new PrintWriter(
							mClientSocket.getOutputStream());
					BufferedReader in = new BufferedReader(
							new InputStreamReader(
									mClientSocket.getInputStream()));
					client_request = in.readLine();

					// 如果cliend发送"please_feedback"，则sever响应，发送响应次数
					if (client_request.contains("Client IP = ")) {
						StringBuilder builder = new StringBuilder();
						builder.append(client_request);
						builder.append(" Server IP = ");
						builder.append(getWifiIpAddress("getprop dhcp.wlan0.ipaddress"));
						
						server_response = builder.toString();
						out.println(server_response);
					}

					out.close();
					in.close();
					mClientSocket.close();

					Message message = mHandler.obtainMessage();
					message.what = SERVER_GET_INFO;
					message.obj = client_request;
					mHandler.sendMessage(message);
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				mHandler.sendEmptyMessage(SERVER_CREATE_FAILED);
			}
		}
	}

	private class ClientThread implements Runnable {

		@Override
		public void run() {
			// TODO Auto-generated method stub
			InetAddress serverAddress;
			try {	
				// 定义服务端的IP
				serverAddress = InetAddress.getByName(HOST);
				// 创建socket去连接server
				Socket mSocket = new Socket(serverAddress, SERVER_PORT);
				
				mHandler.sendEmptyMessage(CLIENT_CONNECT_SUCCESS);

				// 设置开关标识连接状态
				isConnected = true;

				// 创建一个BufferedReader去获取server端反馈回来的信息
				BufferedReader in = new BufferedReader(new InputStreamReader(
						mSocket.getInputStream()));
				// 创建一个PrintWriter去发送信息给server端
				PrintWriter out = new PrintWriter(new BufferedWriter(
						new OutputStreamWriter(mSocket.getOutputStream())),
						true);
				// 给server端发送一个消息
				out.println("Client IP = " + getWifiIpAddress("getprop dhcp.wlan0.ipaddress"));
				// 获取server端的返回信息
				String str = in.readLine();
				
				Message message = mHandler.obtainMessage();
				message.what = CLIENT_GET_INFO;
				message.obj = str;
				mHandler.sendMessage(message);

				in.close();
				out.close();
				mSocket.close();

				isConnected = false;
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				isConnected = false;
				mHandler.sendEmptyMessage(CLIENT_CONNECT_FAILED);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				isConnected = false;
				mHandler.sendEmptyMessage(CLIENT_ACCEPT_FAILED);
			}

		}
	}
	
    public static String getWifiIpAddress(String ops) {
		String cmdRel = "";
		String line = "";
		try {
			Process proc = Runtime.getRuntime().exec(ops);
			InputStreamReader is = new InputStreamReader(proc.getInputStream());
			BufferedReader br = new BufferedReader(is);

			while ((line = br.readLine()) != null) {
				cmdRel += line;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return cmdRel;
	}
}
